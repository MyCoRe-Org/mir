<?xml version="1.0" encoding="UTF-8" ?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<!--  
 This is the Solr schema file. This file should be named "schema.xml" and
 should be in the conf directory under the solr home
 (i.e. ./solr/conf/schema.xml by default) 
 or located where the classloader for the Solr webapp can find it.

 This example schema is the recommended starting point for users.
 It should be kept correct and concise, usable out-of-the-box.

 For more information, on how to customize this file, please see
 http://wiki.apache.org/solr/SchemaXml

 PERFORMANCE NOTE: this schema includes many optional features and should not
 be used for benchmarking.  To improve performance one could
  - set stored="false" for all fields possible (esp large fields) when you
    only need to search on the field but don't need to return the original
    value.
  - set indexed="false" if you don't need to search on the field, but only
    return the field as a result of searching on other indexed fields.
  - remove all unneeded copyField statements
  - for best index size and searching performance, set "index" to false
    for all general text fields, use copyField to copy them to the
    catchall "text" field, and use that for searching.
  - For maximum indexing performance, use the StreamingUpdateSolrServer
    java client.
  - Remember to run the JVM in server mode, and use a higher logging level
    that avoids logging every request
-->

<schema name="MyCoRe-Schema" version="1.5">
  <!-- attribute "name" is the name of this schema and is only used for display purposes.
       version="x.y" is Solr's version number for the schema syntax and 
       semantics.  It should not normally be changed by applications.

       1.0: multiValued attribute did not exist, all fields are multiValued 
            by nature
       1.1: multiValued attribute introduced, false by default 
       1.2: omitTermFreqAndPositions attribute introduced, true by default 
            except for text fields.
       1.3: removed optional field compress feature
       1.4: autoGeneratePhraseQueries attribute introduced to drive QueryParser
            behavior when a single string produces multiple tokens.  Defaults 
            to off for version >= 1.4
       1.5: omitNorms defaults to true for primitive field types 
            (int, float, boolean, string...)
     -->

 <fields>
   <!-- Valid attributes for fields:
     name: mandatory - the name for the field
     type: mandatory - the name of a field type from the 
       <types> fieldType section
     indexed: true if this field should be indexed (searchable or sortable)
     stored: true if this field should be retrievable
     docValues: true if this field should have doc values. Doc values are
       useful for faceting, grouping, sorting and function queries. Although not
       required, doc values will make the index faster to load, more
       NRT-friendly and more memory-efficient. They however come with some
       limitations: they are currently only supported by StrField, UUIDField
       and all Trie*Fields, and depending on the field type, they might
       require the field to be single-valued, be required or have a default
       value (check the documentation of the field type you're interested in
       for more information)
     multiValued: true if this field may contain multiple values per document
     omitNorms: (expert) set to true to omit the norms associated with
       this field (this disables length normalization and index-time
       boosting for the field, and saves some memory).  Only full-text
       fields or fields that need an index-time boost need norms.
       Norms are omitted for primitive (non-analyzed) types by default.
     termVectors: [false] set to true to store the term vector for a
       given field.
       When using MoreLikeThis, fields used for similarity should be
       stored for best performance.
     termPositions: Store position information with the term vector.  
       This will increase storage costs.
     termOffsets: Store offset information with the term vector. This 
       will increase storage costs.
     required: The field is required.  It will throw an error if the
       value does not exist
     default: a value that should be used if no value is specified
       when adding a document.
   -->

   <!-- field names should consist of alphanumeric or underscore characters only and
      not start with a digit.  This is not currently strictly enforced,
      but other field names will not have first class support from all components
      and back compatibility is not guaranteed.  Names with both leading and
      trailing underscores (e.g. _version_) are reserved.
   -->
        
   <field name="_version_" type="long"/>
    <!-- kind of mcrobjectid, mcrderivateid, fileid -->
    <field name="id" type="string" required="true" />
    <field name="objectType" type="string" />
    <field name="objectProject" type="string" />
    <field name="returnId" type="string" />
    <field name="link" type="string" multiValued="true"/>
    <field name="derivateLink" type="string" multiValued="true" />
    <field name="category" type="string" multiValued="true"/>

    <field name="created" type="date" />
    <field name="modified" type="date" />

    <!-- parent handling -->
    <field name="parent" type="string" />
    <field name="parentLinkText" type="string" indexed="false"/>

    <!-- MCRObject structure -->
    <field name="derivates" type="string" multiValued="true" />
    <field name="derCount" type="int" />

    <!-- ignore all undefined fields -->
    <dynamicField name="*" type="ignored" />
<!--     <dynamicField name="*" type="string" multiValued="true" /> -->
    <dynamicField name="ignored_*" type="ignored" />

    <!-- MCRDerivate related metadata -->
    <field name="urn" type="string" multiValued="true" />
    <field name="fileURN" type="string" />
    <field name="fileCategory" type="string" multiValued="true"/>
    <field name="maindoc" type="string" />
    <field name="iviewFile" type="string" />

    <!-- MCRFile related fields -->
    <field name="derivateID" type="string" />
    <field name="filePath" type="string" />
    <field name="fileName" type="string" />

    <!-- Tika default fields -->
    <field name="stream_name" type="string" indexed="true" stored="true" />
    <field name="stream_size" type="long" indexed="true" stored="true" />
    <field name="stream_content_type" type="string" />
    <field name="stream_source_info" type="string" />
    
    <field name="content" type="text" stored="false" />

    <field name="payload" type="payloads" />

    <!-- default search fields -->
    <field name="allMeta" type="text_de" multiValued="true" stored="false" />
    <field name="search_result_link_text" type="text_de" indexed="false"/>
    
    <!-- mycore-mods -->
    <field name="mods.type" type="string" />
    <field name="mods.title" type="text_de" multiValued="true" />
    <field name="mods.gnd" type="string" multiValued="true" />
    <field name="mods.name" type="text" multiValued="true" />
    <field name="mods.author" type="text" multiValued="true" />
    <field name="mods.genre" type="string" multiValued="true" />
    <field name="mods.identifier" type="string" multiValued="true" />
    <field name="mods.abstract" type="text_de" />
    <field name="mods.dateIssued" type="string"/>
    <field name="mods.publisher" type="text" multiValued="true"/>
    <field name="mods.place" type="text" multiValued="true"/>
    
    <!-- ******************************************** -->
    <!-- * SEARCH -->
    <!-- ******************************************** -->
    <field name="title" type="text" multiValued="true" stored="false" />
    <field name="title_de" type="text_de"  multiValued="true" stored="false"/>
    <field name="title_en" type="text_en"  multiValued="true" stored="false"/>
    <dynamicField name="title_*" type="text" multiValued="true" stored="false"/>
    <copyField source="title_*" dest="title" />
    <!-- identifier (gnd, pnd, etc.) -->
    <dynamicField name="id.*" type="string" />
    
    <!-- mir-module -->
    <field name="mir_status" type="string"/>
    <field name="isbn" type="string"/>
   
 </fields>


 <!-- Field to use to determine and enforce document uniqueness. 
      Unless this field is marked with required="false", it will be a required field
   -->
 <uniqueKey>id</uniqueKey>

  <types>
    <!-- field type definitions. The "name" attribute is
       just a label to be used by field definitions.  The "class"
       attribute and any other attributes determine the real
       behavior of the fieldType.
         Class names starting with "solr" refer to java classes in a
       standard package such as org.apache.solr.analysis
    -->

    <!-- The StrField type is not analyzed, but indexed/stored verbatim. -->
    <fieldType name="string" class="solr.StrField" sortMissingLast="true" omitNorms="true" />
    <fieldType name="boolean" class="solr.BoolField" sortMissingLast="true" omitNorms="true" />
    <fieldType name="int" class="solr.TrieIntField" precisionStep="0" omitNorms="true" positionIncrementGap="0" />
    <fieldType name="long" class="solr.TrieLongField" precisionStep="0" omitNorms="true" positionIncrementGap="0" />
    <fieldType name="date" class="solr.TrieDateField" omitNorms="true" precisionStep="0" positionIncrementGap="0" />
    <fieldtype name="ignored" stored="false" indexed="false" multiValued="true" class="solr.StrField" />

    <fieldtype name="payloads" stored="false" class="solr.TextField">
      <analyzer>
        <tokenizer class="solr.WhitespaceTokenizerFactory" />
        <!-- The DelimitedPayloadTokenFilter can put payloads on tokens... for example, a token of "foo|1.4" would be indexed as "foo" with a 
          payload of 1.4f Attributes of the DelimitedPayloadTokenFilterFactory : "delimiter" - a one character delimiter. Default is | (pipe) "encoder" 
          - how to encode the following value into a playload float -> org.apache.lucene.analysis.payloads.FloatEncoder, integer -> o.a.l.a.p.IntegerEncoder 
          identity -> o.a.l.a.p.IdentityEncoder Fully Qualified class name implementing PayloadEncoder, Encoder must have a no arg constructor. -->
        <filter class="solr.DelimitedPayloadTokenFilterFactory" delimiter="|" encoder="identity" />
      </analyzer>
    </fieldtype>

    <!-- lowercases the entire field value, keeping it as a single token. -->
    <fieldType name="lowercase" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.KeywordTokenizerFactory" />
        <filter class="solr.LowerCaseFilterFactory" />
      </analyzer>
    </fieldType>

    <fieldType name="text" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.ICUTokenizerFactory" />
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt" enablePositionIncrements="true" />
        <filter class="solr.ICUFoldingFilterFactory" />
        <filter class="solr.RemoveDuplicatesTokenFilterFactory" />
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.ICUTokenizerFactory" />
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true" />
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt" enablePositionIncrements="true" />
        <filter class="solr.ICUFoldingFilterFactory" />
        <filter class="solr.RemoveDuplicatesTokenFilterFactory" />
      </analyzer>
    </fieldType>

    <fieldType name="text_de" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.ICUTokenizerFactory" />
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1"
          catenateNumbers="1" catenateAll="0" splitOnCaseChange="1" />
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_de.txt" format="snowball" enablePositionIncrements="true" />
        <filter class="solr.ICUFoldingFilterFactory" />
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt" />
        <filter class="solr.SnowballPorterFilterFactory" language="German2" />
        <filter class="solr.RemoveDuplicatesTokenFilterFactory" />
        <filter class="solr.LengthFilterFactory" min="3" max="100" />
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.ICUTokenizerFactory" />
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true" />
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="0"
          catenateNumbers="0" catenateAll="0" splitOnCaseChange="1" />
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_de.txt" format="snowball" enablePositionIncrements="true" />
        <filter class="solr.ICUFoldingFilterFactory" />
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt" />
        <filter class="solr.SnowballPorterFilterFactory" language="German2" />
        <filter class="solr.RemoveDuplicatesTokenFilterFactory" />
        <filter class="solr.LengthFilterFactory" min="3" max="100" />
      </analyzer>
    </fieldType>
    
    <fieldType name="text_en" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.StandardTokenizerFactory" />
          <!-- in this example, we will only use synonyms at query time
          <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
          -->
          <!-- Case insensitive stop word removal.
            add enablePositionIncrements=true in both the index and query
            analyzers to leave a 'gap' for more accurate phrase queries.
          -->
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt" enablePositionIncrements="true" />
        <filter class="solr.LowerCaseFilterFactory" />
        <filter class="solr.EnglishPossessiveFilterFactory" />
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt" />
    <!-- Optionally you may want to use this less aggressive stemmer instead of PorterStemFilterFactory:
          <filter class="solr.EnglishMinimalStemFilterFactory"/>
    -->
        <filter class="solr.PorterStemFilterFactory" />
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.StandardTokenizerFactory" />
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true" />
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt" enablePositionIncrements="true" />
        <filter class="solr.LowerCaseFilterFactory" />
        <filter class="solr.EnglishPossessiveFilterFactory" />
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt" />
    <!-- Optionally you may want to use this less aggressive stemmer instead of PorterStemFilterFactory:
          <filter class="solr.EnglishMinimalStemFilterFactory"/>
    -->
        <filter class="solr.PorterStemFilterFactory" />
      </analyzer>
    </fieldType>

 </types>
  
  <!-- Similarity is the scoring routine for each document vs. a query.
       A custom Similarity or SimilarityFactory may be specified here, but 
       the default is fine for most applications.  
       For more info: http://wiki.apache.org/solr/SchemaXml#Similarity
    -->
  <!--
     <similarity class="com.example.solr.CustomSimilarityFactory">
       <str name="paramkey">param value</str>
     </similarity>
    -->

</schema>
